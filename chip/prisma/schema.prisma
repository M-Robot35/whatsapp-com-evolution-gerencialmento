datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  instancia     Instancia[]
  role          Role            @default(USER)
  Authenticator Authenticator[]
  botMessage    BotMessage[]
  userMessageStatus UserMessageStatus[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BotMessage {
  id           String   @id @default(cuid())
  userId       String   @unique // Cada usuário tem um estado do bot
  isActive     Boolean  @default(false)
  instanceName String?  
  
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserMessageStatus {
  id             String  @id @default(cuid())
  userId         String
  instanceName   String
  number         String
  botSendMessage Boolean @default(false)
  isBlocked      Boolean @default(false)
  timeToAnswer   Int     @default(0) // Tempo do último envio do bot
  pausedUntil    DateTime? // Quando o bot pode voltar a falar

  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, instanceName])
}

model Instancia {
  id               String @id @default(cuid())
  userId           String
  instanciaName    String
  statusConnection String
  numero           String
  hash             String
  baseCode           String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("instancia")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
